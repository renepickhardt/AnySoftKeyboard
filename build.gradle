buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.9.+'
    }
}

apply plugin: 'android'

repositories {
    mavenCentral()
}

version utils.Utils.buildVersionName(1, 2, false)
group 'net.evendanan'

def localproperties.LocalPropertiesFile localExtraProperties = new localproperties.LocalPropertiesFile(new File(projectDir, 'local.extra.properties'))
def localproperties.LocalPropertiesFile localSigningProperties = new localproperties.LocalPropertiesFile(new File(projectDir, 'local.signing.properties'))

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.1"

    defaultConfig {
        versionCode 123
        versionName project.version

        minSdkVersion 7
        targetSdkVersion 19
        //adding additional fields to the BuildConfig class.

        //extra details - from local
        def String support_email_address = localExtraProperties.getValueWithConsoleFallback('CRASH_REPORT_EMAIL', 'ooops@example.com', 'Support email address')
        println 'crash report email is: '+support_email_address

        buildConfigField "String", "CRASH_REPORT_EMAIL_ADDRESS", '"'+support_email_address+'"'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
        release {
            def String keystore_file = localSigningProperties.getValueWithConsoleFallback('STORE_FILE', 'Key-Store file name')
            def String keystore_password = localSigningProperties.getValueWithConsoleFallback('STORE_PASSWORD', 'Key-Store file password')
            def String key_alias = localSigningProperties.getValueWithConsoleFallback('KEY_ALIAS', 'App key alias')
            def String key_alias_password = localSigningProperties.getValueWithConsoleFallback('KEY_PASSWORD', 'App key password')

            if (    utils.Utils.isEmpty(keystore_file) || utils.Utils.isEmpty(keystore_password) ||
                    utils.Utils.isEmpty(key_alias) || utils.Utils.isEmpty(key_alias_password)) {
                //missing signing details, so I'll use debug signingConfigs details.
                println "Missing release build-type signing details, I'll use DEBUG signing for the release."
                storeFile signingConfigs.debug.storeFile
                storePassword signingConfigs.debug.storePassword
                keyAlias signingConfigs.debug.keyAlias
                keyPassword signingConfigs.debug.keyPassword
            } else {
                println 'For signing, will use key-store file '+keystore_file+', with key '+key_alias
                storeFile file(keystore_file)
                storePassword keystore_password
                keyAlias key_alias
                keyPassword key_alias_password
            }
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            zipAlign true

            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }

        debug {
            signingConfig signingConfigs.release
            zipAlign true
            debuggable true
        }
    }
}

dependencies {
    compile 'net.evendanan.anysoftkeyboard:api:1.2.2@aar'
    compile 'net.evendanan:frankenrobot:1.1.3@aar'
    compile 'com.android.support:support-v4:19.0.1'
    compile 'com.android.support:appcompat-v7:19.0.1'
    compile 'com.google.code.findbugs:jsr305:2.0.2'
    //https://groups.google.com/d/msg/adt-dev/nQobKd2Gl_8/Z5yWAvCh4h4J
    compile fileTree(dir: 'libs', include: 'native_libs.jar')
}
